{% extends 'base.html.twig' %}

{% block title %} Création d'une annonce {% endblock %} 


{% form_theme form _self %}



{# Méthode avec un thème Symfony bootstrap 4. Il faut configurer le fichier config/packages/twig.yaml avec la ligne
form_themes: ['bootstrap_4_layout.html.twig']
 #}

{% block body %}

<div class="container">

<div class="card col-md-8">
        <div class="card-header card-header-icon card-header-rose">
          <div class="card-icon">
            <i class="material-icons">perm_identity</i>
          </div>
          <h4 class="card-title">Créer une nouvelle annonce
          </h4>
        </div>
        <div class="card-body">
         
         {{ form_start(form) }}
   
         {{ form_widget(form) }}

        <button type="submit" class="btn btn-rose pull-right">Créer une nouvelle annonce</button>
        <div class="clearfix"></div>

        {{ form_end(form)}}

        </div>
      </div>

</div>

{% endblock %}

{#[nom]_widget permet de modifier la sortie de form_widget sur un champ donné, ici sur l'image de l'annonce 
C'est un theme personnalisé de TWIG qu'il faut déclarer ({% form_theme form _self %}) #}
{% block _ad_images_widget %}

    <p>Ici, vous pouvez ajouter vos propres images</p>
    {#la variable form représente uniquement le champ image du formulaire #}
    {{form_widget(form)}}
    <div class="form-group">
        <button type="button" id="add-image" class="btn btn-primary">Ajouter une image</button>
    </div>

{% endblock %}


{% block _ad_images_entry_row %}

{{form_widget(form)}}

{% endblock %}




{# les entry représente un élément de la CollectionType #}
{% block _ad_images_entry_widget %}
    <div class="form-group">
        <div class="row">
         <div class="col">
        {# la variable form représente une entry donc soit url soit caption #}
            {{form_widget(form.url)}}
        </div>
        <div class="col">
            {{form_widget(form.caption)}}
        </div>
        </div>
    </div>
{% endblock %}


{# on créer le code javasript permettant de créer les formulaires d'ajout d'image en temps réel #}
{% block javascripts %}

<script>

$('#add-image').click(function(){

// Je récupère le numéro des futurs champs que je vais créer
const index = $('#ad_images div.form-group').length;

// Je récupère le prototype des entrées
const tmpl = $('#ad_images').data('prototype').replace(/__name__/g, index);


// J'injecte ce code au sein de la DIV
$('#ad_images').append(tmpl);
});


</script>



{% endblock %}














{# permet de spécifier à TWIG qu'il doit utiliser un thème de formulaire. Celui ci est défini par _self lorsque le 
paramétrage se trouve au sein du même fichier ou bien on défini le chemin {% form_theme form 'partials/theme/html.twig' %} 

{% form_theme form _self %}

{%  block body %}

    <div class="container">
        <h1>Créer une nouvelle annonce</h1>
    {# créer le début du formulaire passé en paramètre (création de la balise form et de la méthode) 
    {{ form_start(form)}}

    <div class="form-group">
    {{ form_label(form.title)}}
    {#  ajoute les champs du formulaire et permet de personnaliser celui-ci et d'ajouter du code 

    {{ form_widget(form.title, {'attr': {'class':'form-control', 'placeholder': 'Titre de l\'annonce'}}) }}
    
    {# on peut utiliser les thèmes de symfony pour définir comment les champs s'affichent 

    </div>

    {#  nous pouvons sélectionner que les champs que nous souhaitons afficher avec la désignation des champs.
     {{form_widget(form.title)}} par exemple n'affiche que le champ title 
     {{form_row(form.title)}} affiche le widget mais aussi le label ainsi que les erreurs pour un champ
     {{form_label(form.title)}} n'affiche que le label
                                                                        

    <button type="submit" class="btn btn-primary">Créer la nouvelle annonce</button>

     {#  créer la fin du formulaire et affiche les champs du formulaire qui n'ont pas été affichés 
    {{ form_end(form)}}

     {# les 3 fonctions twig de formulaire peuvent être remplacées par la fonction {{ form(form) }}
    dans ce cas, le boutton de soumission est ajouté dans le controller 
</div>

{%  endblock %}

{# personnalisation du form_row

{% block form_row %}
    {# le form ici ne représente pas le formulaire form mais le champ du formulaire 
    <div class="form-group">
        {{ form_label(form) }}
        {{ form_widget(form) }}

    </div>
{% endblock %}

{% block text_widget %}
 <input type="text" name="{{full_name}}" id="{{id}}" class="form-control">

{% endblock %}

{# cela fait trop de champs à personnaliser pour créer un thème #}


